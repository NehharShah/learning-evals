---
description: Frontend development rules for React/Next.js
globs: ["app/**/*", "components/**/*", "hooks/**/*", "lib/**/*", "**/*.tsx", "**/*.ts", "**/*.jsx", "**/*.js"]
alwaysApply: false
---

# Frontend Development Rules

## React/Next.js Standards
- Prefer functional components with hooks over class components
- Use proper prop types and interfaces for all components
- Follow React best practices (hooks rules, component composition)
- Use proper key props for lists and dynamic content
- Implement proper loading states and error boundaries

## Component Organization
- Keep components in `/components` directory with logical subdirectories
- Use kebab-case for file names (e.g., `evaluation-table.tsx`)
- Prefer named exports over default exports for components
- Co-locate related files (component + styles + tests)
- Keep components focused and single-purpose

## Hooks and State Management
- Use React hooks appropriately (useState, useEffect, useMemo, useCallback)
- Use React.memo for performance optimization when needed
- Implement proper cleanup in useEffect hooks
- Use custom hooks for reusable logic
- Manage state at the appropriate level (local vs global)

## UI/UX with shadcn/ui
- Use shadcn/ui components consistently throughout the application
- Implement proper accessibility (ARIA labels, keyboard navigation)
- Follow responsive design principles with Tailwind CSS
- Maintain consistent spacing and typography using design tokens
- Implement proper loading states and error messages
- Use proper form validation and user feedback

## Next.js Specific
- Use App Router patterns and file-based routing
- Implement proper SEO with metadata API
- Use proper image optimization with next/image
- Implement proper client/server component boundaries
- Use proper error boundaries and not-found pages
